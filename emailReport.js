'use strict'

const nodemailer = require('nodemailer')
const fs = require('fs')
const AdmZip = require('adm-zip')
const dotenv = require('dotenv')
var path = require('path')
dotenv.config()

const outFile = path.join('cypress', 'reports', 'TestReport.zip')
const reportsPath = path.join('cypress', 'reports', 'AppAdmin-Cypress-Report.html')
const logPath = path.join('cypress-mochawesome-reporter.log')
const screenshotsPath = path.join('cypress', 'screenshots')
const videosPath = path.join('cypress', 'videos')
const reportJson = path.join('cypress', 'reports', 'output.json')

const msToHms = (milliseconds) => {
  //Get hours from milliseconds
  var hours = milliseconds / (1000 * 60 * 60)
  var absoluteHours = Math.floor(hours)
  var h = absoluteHours > 9 ? absoluteHours : '0' + absoluteHours

  //Get remainder from hours and convert to minutes
  var minutes = (hours - absoluteHours) * 60
  var absoluteMinutes = Math.floor(minutes)
  var m = absoluteMinutes > 9 ? absoluteMinutes : '0' + absoluteMinutes

  //Get remainder from minutes and convert to seconds
  var seconds = (minutes - absoluteMinutes) * 60
  var absoluteSeconds = Math.floor(seconds)
  var s = absoluteSeconds > 9 ? absoluteSeconds : '0' + absoluteSeconds

  return h + ':' + m + ':' + s
}

const sendReportMail = async () => {
  //zip the reports folder
  const file = new AdmZip()
  file.addLocalFile(reportsPath)

  if (fs.existsSync(screenshotsPath)) {
    file.addLocalFolder(screenshotsPath, 'screenshots')
  }

  if (fs.existsSync(videosPath)) {
    file.addLocalFolder(videosPath, 'videos')
  }

  fs.writeFileSync(outFile, file.toBuffer())

  const configs = {
    host: process.env.EMAIL_HOST,
    port: Number(process.env.EMAIL_PORT) || 587,
    auth: {
      user: process.env.EMAIL_USERNAME,
      pass: process.env.EMAIL_PASSWORD,
    },
    tls: {
      minVersion: 'TLSv1.2',
      ciphers: 'SSLv3',
    },
  }

  // create reusable transporter object using the default SMTP transport
  let transporter = nodemailer.createTransport(configs)

  var data = fs.readFileSync(logPath, 'utf8')
  var reportData = fs.readFileSync(reportJson, 'utf8')

  const parsedReport = JSON.parse(reportData)

  const stats = parsedReport.stats

  const browserRegexp = /cypress.json: (.*)/g
  var browserMatches = browserRegexp.exec(data) || ''
  var browserResponse = JSON.parse(browserMatches[1])

  const emailData = [
    {
      color: 'black',
      label: 'Total Test Cases Executed',
      value: stats.tests,
    },
    {
      color: 'green',
      label: 'Passed Test Cases',
      value: stats.passes,
    },
    {
      color: 'red',
      label: 'Failed Test Cases',
      value: stats.failures,
    },
    {
      color: 'grey',
      label: 'Ignored Test Cases',
      value: stats.skipped,
    },
    {
      color: 'blue',
      label: 'Total Execution Time (hh:mm:ss)',
      value: msToHms(stats.duration),
    },
    {
      color: 'orange',
      label: 'Tests Run in Browser',
      value: browserResponse.browsers[0].displayName,
    },
  ]

  let tableBody = ''
  emailData.forEach((ed) => {
    tableBody += `<tr style="color: ${ed.color}"><td style="padding: .5em;border: 1px solid lightgrey;">${ed.label}</td><td style="padding: .5em;border: 1px solid lightgrey;">${ed.value}</td></tr>`
  })

  var htmlContent = `
  <html>
    <body>
        <p>Hi All 
        <br></br> &emsp;
        This is an automated mail generated by Cypress Application Admin End to End Test Suite V1.0.0 and below is the summary of the test execution.
        </br><br>Please find the attachment for the detailed report.</br></p>
        <h2 align="left">Test Summary</h2>
        <table style="background: white;border: 1px solid grey;border-collapse: collapse;">
          <tbody>
            ${tableBody}
          </tbody>
        </table>
    </body>
  </html>`

  // send mail with defined transport object
  await transporter.sendMail({
    from: process.env.EMAIL_FROM,
    to: process.env.EMAIL_TO,
    subject: `Cypress Test Suite - Application Admin ${process.env.VERSION} End to End Test ${process.env.ENVIRONMENT} - ${stats.start}`,
    html: htmlContent,
    attachments: [
      {
        filename: 'AppAdmin_e2eTestReport.zip',
        path: outFile,
      },
    ],
  })

  // Remove the file
  fs.unlink(outFile, (err) => {
    if (err) throw err
  })
}

sendReportMail()
